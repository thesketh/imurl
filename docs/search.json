[{"fullname": "imurl", "modulename": "imurl", "qualname": "", "type": "module", "doc": "<p><a href=\"https://github.com/psf/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\" /></a>\n<a href=\"https://github.com/PyCQA/pylint\"><img src=\"https://img.shields.io/badge/linter-pylint-09BB44.svg\" alt=\"Linter: pylint\" /></a>\n<a href=\"http://mypy-lang.org/\"><img src=\"http://www.mypy-lang.org/static/mypy_badge.svg\" alt=\"Checked with mypy\" /></a></p>\n\n<p><code>imurl</code> is an immutable URL library, written in modern Python.</p>\n\n<p><code>imurl</code> is inspired by both <a href=\"https://github.com/codeinthehole/purl\"><code>purl</code></a> and Python's <a href=\"https://docs.python.org/3/library/pathlib.html\"><code>pathlib</code></a>\nand <a href=\"https://docs.python.org/3/library/datetime.html\"><code>datetime</code></a> modules. It aims to provide a simple, immutable data structure to represent \nURL structures, with support for a wide range of URL/URI schemes.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>Here are some quick examples for <code>imurl</code>. <a href=\"https://thesketh.github.io/imurl/imurl/url.html#URL\">There are more in the documentation.</a>.</p>\n\n<p>URLs can be created from URL strings, and have the attributes you'd expect:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">imurl</span> <span class=\"kn\">import</span> <span class=\"n\">URL</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://example.com&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">host</span>\n<span class=\"s1\">&#39;example.com&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">scheme</span>\n<span class=\"s1\">&#39;https&#39;</span>\n</code></pre></div>\n\n<p>URLs are immutable, but components can be replaced similarly to <code>datetime</code>/<code>pathlib</code> objects:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/some/path&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/some/path&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">path</span>  <span class=\"c1\"># This is still `None` - we haven&#39;t modified `u`.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/some/path&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">path_as_posix</span>\n<span class=\"n\">PurePosixPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;/some/path&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>URLs can also be built from components, and query/path parameters can be set/get/deleted:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s2\">&quot;https&quot;</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;google.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/search&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://google.com/search&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u2</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">set_query</span><span class=\"p\">(</span><span class=\"s2\">&quot;q&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a+search+term&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u2</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://google.com/search?q=a+search+term&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u2</span><span class=\"o\">.</span><span class=\"n\">delete_query</span><span class=\"p\">(</span><span class=\"s2\">&quot;q&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://google.com/search&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p><code>imurl</code> can be installed with <code>pip</code>, and has been tested on Python 3.7. <code>imurl</code> is still\nalpha software, and should be considered unstable:</p>\n\n<pre><code>pip install imurl\n</code></pre>\n"}, {"fullname": "imurl.url", "modulename": "imurl.url", "qualname": "", "type": "module", "doc": "<p>The URL class.</p>\n"}, {"fullname": "imurl.url.URL", "modulename": "imurl.url", "qualname": "URL", "type": "class", "doc": "<p>A simple, immutable URL class.</p>\n\n<p><strong>URLs and their components</strong></p>\n\n<p>URLs, as represented by this class, take the following general form (as\noutlined by <a href=\"https://datatracker.ietf.org/doc/html/rfc1738\">RFC1738</a> and \n<a href=\"https://datatracker.ietf.org/doc/html/rfc3986\">RFC3986</a>):</p>\n\n<pre><code>[scheme:][//[username[:password]@]host[:port]][path][;parameters][?query][#fragment]\n</code></pre>\n\n<p>Some combinations of components also have represenations:</p>\n\n<ul>\n<li><code>URL.userinfo</code></li>\n<li><code>URL.netloc</code></li>\n</ul>\n\n<p><strong>Construction and use</strong></p>\n\n<p>The constructor can take a URL string, URL components as key word arguments,\nor a mixture of both (keyword arguments will override the URL string):</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"s2\">&quot;https&quot;</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;example.com&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://example.com&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://google.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">&quot;example.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/some/path&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://example.com/some/path&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>As <code>URL</code> objects are immutable, a handy <code>URL.replace</code> method (which takes\nthe same arguments as the constructor) will create a new <code>URL</code> by replacing\nparts from the original <code>URL</code> (similarly to how <a href=\"https://docs.python.org/3/library/datetime.html#datetime.date.replace\"><code>datetime</code></a> \nwork in the stdlib):</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://example.com&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/index.html&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;http://example.com/index.html&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Most URL components need to be strings or <code>None</code>, with the exception of:</p>\n\n<ul>\n<li><code>URL.port</code>, which can be an <code>int</code> or <code>None</code></li>\n<li><code>URL.path</code>, which can be a <code>str</code>, <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePosixPath\"><code>PurePosixPath</code></a>\nor <code>None</code></li>\n<li><code>URL.query</code> and <code>URL.parameters</code> (see below).</li>\n</ul>\n\n<p><strong>URL encoding</strong></p>\n\n<p>Many special characters are supposed to be '% encoded' in URLs. With the \n<code>quote_components</code> flag set, keyword args to the constructor and to\n<code>replace</code> are percent encoded using <a href=\"https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote\"><code>urllib.parse.quote</code></a>.\nThis is set to <code>True</code> by default for the constructor, and <code>False</code> for \narguments to <code>replace</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://example.com)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/some/path with spaces&quot;</span><span class=\"p\">,</span> <span class=\"n\">quote_components</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/some/path%20with</span><span class=\"si\">%20s</span><span class=\"s1\">paces&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/some/path with spaces&quot;</span><span class=\"p\">,</span> <span class=\"n\">quote_components</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/some/path with spaces&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p><strong>Working with query/path parameters</strong></p>\n\n<p>Path parameters and query parameters are parts of the URL which can\nbe used to represent key-value data.</p>\n\n<p>This is an example of a URL with a scheme, host and path:</p>\n\n<pre><code>scheme://some-host.com/path/to/somewhere\n</code></pre>\n\n<p>Path parameters come after the path section of the URL These are not commonly\nused in modern URL schemes, but have some historical significance. They're\ntypically delimited using a semicolon, but some examples use a comma.\nThis delimiter can be configured by changing <code>URL.param_delimiter</code>:</p>\n\n<pre><code>scheme://some-host.com/path/to/somewhere;these=are;path=params\n</code></pre>\n\n<p>Query parameters come after the path section of the URL <em>and</em> after\nthe path parameters. The query section starts with a question mark,\nand then uses a delimiter between key-value pairs (typically an ampersand,\nthough this can be configured by changing <code>URL.query_delimiter</code>):</p>\n\n<pre><code>scheme://some-host.com/path/to/somewhere?these=are&amp;query=params\nscheme://some-host.com/path/to/somewhere;path=params?query=params\n</code></pre>\n\n<p>Since these typically represent key-value data, <code>imurl</code> considers them to be\nstring-string mappings instead of strings, and they are set/accessed as such. \nIn the constructor/<code>replace</code>, these are passed as <code>param_dict</code> and <code>query_dict</code>.</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://example.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">query_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;query&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;param&quot;</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com?query=param&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">query</span>\n<span class=\"s1\">&#39;query=param&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">query_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">&#39;query&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;param&#39;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">(</span><span class=\"s1\">&#39;query&#39;</span><span class=\"p\">):</span>\n<span class=\"s1\">&#39;param&#39;</span>\n</code></pre></div>\n\n<p>Additionally, if the values are set to <code>None</code>, the keys appear without '=value':</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://example.com/&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">param_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/;key&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">query_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/?key&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>Since these components are quite 'special', there are some extra methods to \nwork with them.</p>\n\n<p>The following properties are available:</p>\n\n<ul>\n<li><code>query</code> / <code>parameters</code>: the string form of these components.</li>\n<li><code>query_dict</code> / <code>param_dict</code>: copies of the dictionaries.</li>\n</ul>\n\n<p>And the following methods are available:</p>\n\n<ul>\n<li><code>has_query</code> / <code>has_parameter</code>: get whether the given key is in the dict.</li>\n<li><code>get_query</code> / <code>get_parameter</code>: get the value from the key.</li>\n<li><code>set_query</code> / <code>set_parameter</code>: add/modify a key/value pair, getting\na new URL.</li>\n<li><code>delete_query</code> / <code>delete_parameter</code>: remove a k/v pair, getting a new \nURL.</li>\n</ul>\n"}, {"fullname": "imurl.url.URL.__init__", "modulename": "imurl.url", "qualname": "URL.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "url_string", "scheme", "username", "password", "host", "port", "path", "param_dict", "param_delimiter", "query_dict", "query_delimiter", "fragment", "quote_components"], "funcdef": "def"}, {"fullname": "imurl.url.URL.scheme", "modulename": "imurl.url", "qualname": "URL.scheme", "type": "variable", "doc": "<p>The 'scheme' component of the URL (e.g. 'http').</p>\n"}, {"fullname": "imurl.url.URL.username", "modulename": "imurl.url", "qualname": "URL.username", "type": "variable", "doc": "<p>The 'username' component of the URL.</p>\n"}, {"fullname": "imurl.url.URL.password", "modulename": "imurl.url", "qualname": "URL.password", "type": "variable", "doc": "<p>The 'password' component of the URL.</p>\n"}, {"fullname": "imurl.url.URL.host", "modulename": "imurl.url", "qualname": "URL.host", "type": "variable", "doc": "<p>The 'host' component of the URL (AKA the domain, e.g. 'example.com').</p>\n"}, {"fullname": "imurl.url.URL.port", "modulename": "imurl.url", "qualname": "URL.port", "type": "variable", "doc": "<p>The port component of the URL (e.g. 8080).</p>\n"}, {"fullname": "imurl.url.URL.path", "modulename": "imurl.url", "qualname": "URL.path", "type": "variable", "doc": "<p>The 'path' component of the URL. Usually a POSIX path.</p>\n"}, {"fullname": "imurl.url.URL.param_delimiter", "modulename": "imurl.url", "qualname": "URL.param_delimiter", "type": "variable", "doc": "<p>The delimiter for the path parameters. Usually ';'.</p>\n"}, {"fullname": "imurl.url.URL.query_delimiter", "modulename": "imurl.url", "qualname": "URL.query_delimiter", "type": "variable", "doc": "<p>The delimiter for the path parameters. Usually '&amp;'.</p>\n"}, {"fullname": "imurl.url.URL.fragment", "modulename": "imurl.url", "qualname": "URL.fragment", "type": "variable", "doc": "<p>The fragment component of the URL (e.g. 'some-html-tag')</p>\n"}, {"fullname": "imurl.url.URL.path_as_posix", "modulename": "imurl.url", "qualname": "URL.path_as_posix", "type": "variable", "doc": "<p>The URL path as a <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePosixPath\"><code>pathlib.PurePosixPath</code></a>.\nThis can be really useful for transforming the path component of a HTTP url:</p>\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://example.com/some/path&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">path_as_posix</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"p\">)</span>\n<span class=\"n\">imurl</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example.com/some&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n"}, {"fullname": "imurl.url.URL.parameters", "modulename": "imurl.url", "qualname": "URL.parameters", "type": "variable", "doc": "<p>The URL's path parameters as a string.</p>\n"}, {"fullname": "imurl.url.URL.param_dict", "modulename": "imurl.url", "qualname": "URL.param_dict", "type": "variable", "doc": "<p>A copy of the path parameter dictionary.</p>\n"}, {"fullname": "imurl.url.URL.query", "modulename": "imurl.url", "qualname": "URL.query", "type": "variable", "doc": "<p>The URL query parameters as a string.</p>\n"}, {"fullname": "imurl.url.URL.query_dict", "modulename": "imurl.url", "qualname": "URL.query_dict", "type": "variable", "doc": "<p>A copy of the query parameter dictionary.</p>\n"}, {"fullname": "imurl.url.URL.userinfo", "modulename": "imurl.url", "qualname": "URL.userinfo", "type": "variable", "doc": "<p>The URL's <code>userinfo</code> component.</p>\n\n<p>This is a composite of the username and password:</p>\n\n<pre><code>username[:password]\n</code></pre>\n"}, {"fullname": "imurl.url.URL.netloc", "modulename": "imurl.url", "qualname": "URL.netloc", "type": "variable", "doc": "<p>The URL's network location component.</p>\n\n<p>This is a composite of the userinfo, the host, and the port:</p>\n\n<pre><code>[userinfo@]host[:port]\n</code></pre>\n"}, {"fullname": "imurl.url.URL.url", "modulename": "imurl.url", "qualname": "URL.url", "type": "variable", "doc": "<p>The complete URL, as a string, built up from the components:</p>\n\n<pre><code>[scheme:][//netloc][path][;parameters][?query][#fragment]\n</code></pre>\n"}, {"fullname": "imurl.url.URL.replace", "modulename": "imurl.url", "qualname": "URL.replace", "type": "function", "doc": "<p>Create a new <code>URL</code> by replacing attributes of the current <code>URL</code>.</p>\n\n<p>This method takes the same keyword arguments as the constructor,\nbut does not accept the URL string.</p>\n", "parameters": ["self", "quote_components", "url_dict"], "funcdef": "def"}, {"fullname": "imurl.url.URL.has_parameter", "modulename": "imurl.url", "qualname": "URL.has_parameter", "type": "function", "doc": "<p>Return whether a given key is a URL path parameter.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.get_parameter", "modulename": "imurl.url", "qualname": "URL.get_parameter", "type": "function", "doc": "<p>Given a path parameter key, return the parameter value.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.set_parameter", "modulename": "imurl.url", "qualname": "URL.set_parameter", "type": "function", "doc": "<p>Given a path parameter key and a value to add/replace, return a new <code>URL</code>\nwith that parameter set.</p>\n", "parameters": ["self", "key", "value"], "funcdef": "def"}, {"fullname": "imurl.url.URL.delete_parameter", "modulename": "imurl.url", "qualname": "URL.delete_parameter", "type": "function", "doc": "<p>Given a path parameter key, return a new <code>URL</code> without that parameter.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.has_query", "modulename": "imurl.url", "qualname": "URL.has_query", "type": "function", "doc": "<p>Return whether a given key is in the URL query parameters.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.get_query", "modulename": "imurl.url", "qualname": "URL.get_query", "type": "function", "doc": "<p>Given a query parameter key, return the query value.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.set_query", "modulename": "imurl.url", "qualname": "URL.set_query", "type": "function", "doc": "<p>Given a query parameter key and a value to add/replace, return a new <code>URL</code>\nwith that query parameter set.</p>\n", "parameters": ["self", "key", "value"], "funcdef": "def"}, {"fullname": "imurl.url.URL.delete_query", "modulename": "imurl.url", "qualname": "URL.delete_query", "type": "function", "doc": "<p>Given a query parameter key, return a new <code>URL</code> without that query.</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "imurl.url.URL.from_dict", "modulename": "imurl.url", "qualname": "URL.from_dict", "type": "function", "doc": "<p>Deserialize the URL from a dict.</p>\n", "parameters": ["cls", "dictionary"], "funcdef": "def"}, {"fullname": "imurl.url.URL.to_dict", "modulename": "imurl.url", "qualname": "URL.to_dict", "type": "function", "doc": "<p>Serialize the URL to a dict.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "imurl.url.URL.from_url_string", "modulename": "imurl.url", "qualname": "URL.from_url_string", "type": "function", "doc": "<p>Create a <code>URL</code> class from a URL string. This isn't perfect - two valid\nsets of URL components can result in the same string.</p>\n\n<p>At present this involves quite a bit of hacking the standard library's\n<code>urllib.parse.urlparse</code>, and could probably do with a rewrite.</p>\n", "parameters": ["cls", "url", "query_delimiter", "param_delimiter"], "funcdef": "def"}, {"fullname": "imurl.url.URLDict", "modulename": "imurl.url", "qualname": "URLDict", "type": "class", "doc": "<p>A typed dictionary of URL components.</p>\n"}, {"fullname": "imurl.url.URLDict.scheme", "modulename": "imurl.url", "qualname": "URLDict.scheme", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.username", "modulename": "imurl.url", "qualname": "URLDict.username", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.password", "modulename": "imurl.url", "qualname": "URLDict.password", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.host", "modulename": "imurl.url", "qualname": "URLDict.host", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.port", "modulename": "imurl.url", "qualname": "URLDict.port", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.path", "modulename": "imurl.url", "qualname": "URLDict.path", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.param_dict", "modulename": "imurl.url", "qualname": "URLDict.param_dict", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.param_delimiter", "modulename": "imurl.url", "qualname": "URLDict.param_delimiter", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.query_dict", "modulename": "imurl.url", "qualname": "URLDict.query_dict", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.query_delimiter", "modulename": "imurl.url", "qualname": "URLDict.query_delimiter", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "imurl.url.URLDict.fragment", "modulename": "imurl.url", "qualname": "URLDict.fragment", "type": "variable", "doc": "<p></p>\n"}]